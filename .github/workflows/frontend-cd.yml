name: CD - Deploy Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      product_api_base:
        description: 'External IP of Product Service (e.g., http://4.198.191.223:8000)'
        required: true
        default: 'http://4.198.191.223:8000'
      order_api_base:
        description: 'External IP of Order Service (e.g., http://4.147.69.124:8001)'
        required: true
        default: 'http://4.147.69.124:8001'
      aks_cluster_name:
        description: 'AKS cluster name'
        required: true
        default: 'kk-wk08-aks'
      aks_resource_group:
        description: 'AKS resource group'
        required: true
        default: 'kk-wk08-rg'

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}                   # e.g., kkwk08acr31758
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}   # e.g., kkwk08acr31758.azurecr.io
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}
  # Change these only if your k8s names differ:
  FRONTEND_DEPLOY: frontend-w08e1
  FRONTEND_SERVICE: frontend-service-w08e1
  FRONTEND_NAMESPACE: app
  FRONTEND_REPO: frontend

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set subscription (paranoia check)
        run: az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Show ACRs visible to the runner
        run: |
          az acr list --query "[].{name:name,server:loginServer,rg:resourceGroup}" -o table
          echo "Using ACR_NAME=${{ env.ACR_NAME }}"
          echo "Using ACR_LOGIN_SERVER=${{ env.ACR_LOGIN_SERVER }}"

      - name: Inject backend API IPs into frontend/main.js
        run: |
          PROD="${{ github.event.inputs.product_api_base }}"
          ORD="${{ github.event.inputs.order_api_base }}"
          echo "Injecting PRODUCT_API=$PROD  ORDER_API=$ORD"
          sed -i "s|_PRODUCT_API_URL_|${PROD}/api|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${ORD}/api|g"   frontend/main.js
          grep -E "PRODUCT_API_BASE_URL|ORDER_API_BASE_URL" -n frontend/main.js || true

      - name: Login to Azure Container Registry
        run: az acr login --name "${{ env.ACR_NAME }}"

      - name: Build & push frontend image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_REPO }}:latest ./frontend
          docker tag  ${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_REPO }}:latest ${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_REPO }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_REPO }}:latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_REPO }}:${{ env.IMAGE_TAG }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group "${{ github.event.inputs.aks_resource_group }}" \
            --name "${{ github.event.inputs.aks_cluster_name }}" \
            --overwrite-existing
          kubectl get nodes

      - name: Ensure namespace exists
        run: |
          kubectl create namespace "${{ env.FRONTEND_NAMESPACE }}" --dry-run=client -o yaml | kubectl apply -f -
          kubectl get ns "${{ env.FRONTEND_NAMESPACE }}"

      - name: Apply frontend manifests
        run: |
          cd k8s/
          # If you have a dedicated frontend manifest file, apply it here:
          # kubectl apply -f frontend.yaml -n "${{ env.FRONTEND_NAMESPACE }}"
          # Otherwise ensure deploy/svc already exist then patch the image:
          kubectl get deploy ${{ env.FRONTEND_DEPLOY }} -n "${{ env.FRONTEND_NAMESPACE }}" || true
          kubectl get svc    ${{ env.FRONTEND_SERVICE }} -n "${{ env.FRONTEND_NAMESPACE }}" || true

      - name: Set frontend image to the one we pushed
        run: |
          # Discover container name in the deployment
          CNAME=$(kubectl -n "${{ env.FRONTEND_NAMESPACE }}" get deploy "${{ env.FRONTEND_DEPLOY }}" -o jsonpath='{.spec.template.spec.containers[0].name}')
          echo "Container name: $CNAME"
          kubectl -n "${{ env.FRONTEND_NAMESPACE }}" set image deploy/${{ env.FRONTEND_DEPLOY }} \
            $CNAME=${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_REPO }}:latest

      - name: Wait for rollout
        run: |
          kubectl -n "${{ env.FRONTEND_NAMESPACE }}" rollout status deploy/${{ env.FRONTEND_DEPLOY }}

      - name: Wait for frontend EXTERNAL-IP
        run: |
          SVC="${{ env.FRONTEND_SERVICE }}"
          NS="${{ env.FRONTEND_NAMESPACE }}"
          echo "Waiting for $SVC in $NS to get an EXTERNAL-IP (up to 5 min)..."
          for i in $(seq 1 60); do
            IP=$(kubectl get svc "$SVC" -n "$NS" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            if [ -n "$IP" ]; then
              echo "FRONTEND_IP=$IP" >> $GITHUB_ENV
              echo "Frontend IP: $IP"
              break
            fi
            sleep 5
          done
          test -n "${IP}" || (echo "Timed out waiting for EXTERNAL-IP"; exit 1)

      - name: Logout Azure
        if: always()
        run: az logout