# week08/.github/workflows/backend_cd.yml
name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: 'kk-wk08-aks'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'kk-wk08-rg'
      aks_acr_name:
        description: 'Name of ACR (unused if we skip attach)'
        required: true
        default: 'kkwk08acr31758'

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP: ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials \
            --resource-group "${{ github.event.inputs.aks_resource_group }}" \
            --name "${{ github.event.inputs.aks_cluster_name }}" \
            --overwrite-existing
          kubectl get nodes

      # ATTACH ACR REMOVED to avoid role-assignment failure

      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          echo "Deploying backend infrastructure..."
          cd k8s/
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml
          kubectl get pods -A

      - name: Deploy Backend Microservices (Product, Order)
        run: |
          echo "Deploying backend microservices..."
          cd k8s/
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml
          kubectl get svc -A

      - name: Wait for Backend LoadBalancer IPs
        run: |
          echo "Waiting for Product and Order LoadBalancer IPs (up to 5 minutes)..."
          PRODUCT_IP=""
          ORDER_IP=""
          for i in $(seq 1 60); do
            echo "Attempt $i/60..."
            PRODUCT_IP=$(kubectl get service product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true)
            ORDER_IP=$(kubectl get service order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true)
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "Product IP: $PRODUCT_IP"
              echo "Order IP:   $ORDER_IP"
              break
            fi
            sleep 5
          done
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Error: LoadBalancer IPs not assigned in time."
            kubectl describe svc product-service-w08e1 || true
            kubectl describe svc order-service-w08e1 || true
            exit 1
          fi
          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Logout from Azure
        if: always()
        run: az logout